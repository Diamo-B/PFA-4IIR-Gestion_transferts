// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//DONE: Users management

model User {
  id        String   @id @default(uuid())
  firstName String?
  lastName  String?
  email     String   @unique
  password  String
  banned    Boolean  @default(false)
  createdAt DateTime @default(now())
  client    Client?
  agent     Agent?
}

model Client {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @id @unique
  Reservations Reservation[]
}

model Agent {
  user         User                      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String                    @id @unique
  categories   AgentCategoryPermission[]
  isSuperAdmin Boolean                   @default(false)
}

//DONE: Authorizations

model Category {
  id         String                    @id @default(uuid())
  name       String                    @unique
  categories AgentCategoryPermission[]
}

model AgentCategoryPermission {
  id          String       @id @default(uuid())
  agent       Agent        @relation(fields: [agentId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  agentId     String
  category    Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId  String
  permissions Permission[]
}

model Permission {
  id     String                    @id @default(uuid())
  value  String                    @unique
  agents AgentCategoryPermission[]
}

//DONE : Places & Paths
model Place {
  id            String         @id @default(uuid())
  name          String         @unique
  longitude     Float?
  latitude      Float?
  images        Image[]
  createdAt     DateTime       @default(now())
  isDepartureOf transferPath[] @relation("PlaceDeparture")
  isArrivalOf   transferPath[] @relation("PlaceArrival")
}

model transferPath {
  id          String   @id @default(uuid())
  distance    Float?
  price       Float?
  active      Boolean
  createdAt   DateTime @default(now())
  departure   Place    @relation("PlaceDeparture", fields: [departureId], references: [id], onDelete: Cascade)
  departureId String
  arrival     Place    @relation("PlaceArrival", fields: [arrivalId], references: [id], onDelete: Cascade)
  arrivalId   String

  Reservations Reservation[]
  @@unique([departureId, arrivalId])
}

//Done: Vehicules && models

model Model {
  id        String     @id @default(uuid())
  label     String     @unique
  vehicules Vehicule[]
}

model Vehicule {
  id        String  @id @default(uuid())
  sub_Brand String
  brand     String
  places    Int
  Status    Boolean @default(false)
  lux       Boolean
  modelId   String
  model     Model   @relation(fields: [modelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  images    Image[]

  Reservations Reservation[]
}

//DONE: Periods

model Period {
  id    String   @id @default(uuid())
  label String   @unique
  start DateTime
  end   DateTime
  price Float

  Reservations Reservation[]
}

//Done: Extras

model Extra {
  id        String    @id @default(uuid())
  label     String
  params    Json?
  price     Float
  active    Boolean   @default(false)
  typeId    String
  type      ExtraType @relation(fields: [typeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  images    Image[]
  createdAt DateTime  @default(now())


  Reservations Reservation[]
  @@unique([label, typeId])
}

model ExtraType {
  id     String  @id @default(uuid())
  label  String  @unique
  extras Extra[]
}

//Doing: Reservations

enum state {
  PENDING
  VALIDATED
  CONFIRMED
  PAYED
  REJECTED
}

model Reservation {
  id              String   @id @default(uuid())
  ReservationDate DateTime //------------------
  ReturnDate      DateTime? //------------------
  state           state @default(PENDING)
  VehiclesCount   Int @default(1)
  Travelers       Int //---------------------
  TotalPrice      Float @default(0)
  Luxury          Boolean //---------------------
  createdAt       DateTime @default(now())

  transferPathID String //-----------------------
  transferPath   transferPath @relation(fields: [transferPathID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  extras Extra[]

  Vehicles Vehicule[]

  periodId String?
  period Period? @relation(fields: [periodId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  clientID String //--------------
  client   Client   @relation(fields: [clientID], references: [userId], onDelete: Cascade, onUpdate: Cascade) 
}

//? Whole app images
model Image {
  id         String    @id @default(uuid())
  path       String
  placeId    String?
  place      Place?    @relation(fields: [placeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vehiculeId String?
  vehicule   Vehicule? @relation(fields: [vehiculeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ExtraId    String?
  Extra      Extra?    @relation(fields: [ExtraId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
