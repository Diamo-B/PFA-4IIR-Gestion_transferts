// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//DONE: Users management

model User {
  id        String   @id @default(uuid())
  firstName String?
  lastName  String?
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  client    Client?
  agent     Agent?
}

model Client {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @id @unique
}

model Agent {
  user         User                      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String                    @id @unique
  categories   AgentCategoryPermission[]
  isSuperAdmin Boolean                   @default(false)
}

//DONE: Authorizations

model Category {
  id         String                    @id @default(uuid())
  name       String                    @unique
  categories AgentCategoryPermission[]
}

model AgentCategoryPermission {
  id          String       @id @default(uuid())
  agent       Agent        @relation(fields: [agentId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  agentId     String
  category    Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId  String
  permissions Permission[]
}

model Permission {
  id     String                    @id @default(uuid())
  value  Value
  agents AgentCategoryPermission[]
}

enum Value {
  read
  create
  update
  delete
}

//Doing : Places & Paths

model Place {
  id            String         @id @default(uuid())
  name          String         @unique
  longitude     Float?
  latitude      Float?
  image         Image[]
  createdAt     DateTime       @default(now())
  isDepartureOf transferPath[] @relation("PlaceDeparture")
  isArrivalOf   transferPath[] @relation("PlaceArrival")
}

model Image {
  id      String @id @default(uuid())
  path    String
  placeId String
  place   Place  @relation(fields: [placeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model transferPath {
  id          String   @id @default(uuid())
  distance    Float?
  price       Float?
  active      Boolean
  createdAt   DateTime @default(now())
  departure   Place    @relation("PlaceDeparture", fields: [departureId], references: [id])
  departureId String
  arrival     Place    @relation("PlaceArrival", fields: [arrivalId], references: [id])
  arrivalId   String
}
